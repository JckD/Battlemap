[{"C:\\Users\\Jack\\Documents\\battlemat\\src\\index.js":"1","C:\\Users\\Jack\\Documents\\battlemat\\src\\App.js":"2","C:\\Users\\Jack\\Documents\\battlemat\\src\\reportWebVitals.js":"3","C:\\Users\\Jack\\Documents\\battlemat\\src\\utils\\modelLoader.js":"4","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\sideBar.component.js":"5","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\scene.component.js":"6","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\provider.component.js":"7"},{"size":517,"mtime":1608396491121,"results":"8","hashOfConfig":"9"},{"size":973,"mtime":1609613101935,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1608396491122,"results":"11","hashOfConfig":"9"},{"size":1930,"mtime":1611436782421,"results":"12","hashOfConfig":"9"},{"size":5275,"mtime":1611511561884,"results":"13","hashOfConfig":"9"},{"size":8189,"mtime":1611512009103,"results":"14","hashOfConfig":"9"},{"size":777,"mtime":1609612698763,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"196lrt6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\Jack\\Documents\\battlemat\\src\\index.js",[],["36","37"],"C:\\Users\\Jack\\Documents\\battlemat\\src\\App.js",["38","39"],"\r\nimport './App.css';\r\nimport React from 'react'\r\nimport Scene from './components/scene.component';\r\nimport StateProvider from './components/provider.component';\r\nimport { useState } from 'react';\r\nimport SideBar from './components/sideBar.component';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n\r\nfunction App() {\r\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: prefersDarkMode ? 'dark' : 'light',\r\n        },\r\n      }),\r\n    [prefersDarkMode],\r\n  );\r\n\r\n  return (\r\n\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline/>\r\n      <StateProvider>\r\n        <SideBar/>\r\n        {/* <Scene/> */}\r\n      </StateProvider>\r\n      \r\n    </ThemeProvider>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Jack\\Documents\\battlemat\\src\\reportWebVitals.js",[],"C:\\Users\\Jack\\Documents\\battlemat\\src\\utils\\modelLoader.js",["40"],"import * as THREE from \"three\";\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\r\n\r\n/*\r\n    modelLoader.js\r\n\r\n    Exports function loadModel.\r\n\r\n    Takes a model file as input and loads it into\r\n    the three.js scene\r\n*/\r\n\r\n const loadModel = function(model) {\r\n\r\n    var file = model;\r\n    let reader = new FileReader();\r\n    var loader = new STLLoader();\r\n\r\n    // Necessary for camera/plane rotation\r\n    var degree = Math.PI/180;\r\n    \r\n\r\n    // reader.addEventListener( 'load', function ( event ) {\r\n\r\n    //     var contents = event.target.result;\r\n        \r\n    //     var geometry = new STLLoader().parse( contents );\r\n    //     var material = new THREE.MeshStandardMaterial();\r\n    //     var mesh = new THREE.Mesh( geometry, material );\r\n        \r\n    //     mesh.castShadow = true;\r\n    //     mesh.receiveShadow = true;\r\n        \r\n    //     //scene.add( mesh );\r\n        \r\n    //     //console.log(mesh)\r\n    //     //return (mesh);\r\n\r\n    // }, false );\r\n\r\n\r\n     \r\n\r\n//     loader.load( file[0], function ( geometry ) {\r\n//         \r\n        \r\n//         var mesh = new THREE.Mesh( geometry, material );\r\n//         mesh.position.set( 0, -6, 0);\r\n//         mesh.rotation.x  = -90 * degree;\r\n//         mesh.rotation.z = 90 * degree\r\n    \r\n//         mesh.receiveShadow = true;\r\n//         mesh.castShadow = true;\r\n        \r\n//         mesh.name = 'new model'\r\n// ;\r\n//         return(mesh)\r\n//     } );\r\n\r\n    \r\n\r\n    reader.onload = function ()\r\n    {\r\n        //var loader = new THREE.STLLoader();\r\n        // parse the .stl file\r\n        var material = new THREE.MeshPhongMaterial( { color: 0x757575 } );\r\n        var geometry = loader.parse(this.result);\r\n        var mesh = new THREE.Mesh(geometry, material);\r\n        mesh.castShadow = true;\r\n        mesh.receiveShadow = true;\r\n        return(mesh);\r\n    };\r\n  \r\n    reader.readAsArrayBuffer(file[0])\r\n};\r\n\r\nexport default loadModel;",["41","42"],"C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\sideBar.component.js",["43","44","45","46"],"import React, { Component } from 'react';\r\nimport { useState } from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { List, ListItem, ListItemIcon, Slider, Container } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport PopupState, { bindMenu, bindTrigger } from 'material-ui-popup-state';\r\nimport loadModel from '../utils/modelLoader.js';\r\nimport MContext from './provider.component';\r\nimport Scene from './scene.component';\r\n\r\nconst ModelList = props => (\r\n    <ListItem >\r\n        <PopupState variant='popover' popupId='demo-popup=menu'>\r\n            {(popupState => (\r\n                <React.Fragment>\r\n                    <Button {...bindTrigger(popupState)}>\r\n                        {props.model.name}\r\n                    </Button>\r\n                    <Menu {...bindMenu(popupState)}>\r\n                        <MenuItem onClick={popupState.close}>Add to Scene</MenuItem>\r\n                        <MenuItem onClick={popupState.close}>Position</MenuItem>\r\n                        <Divider/>\r\n                            <MenuItem onClick={popupState.close}>Scale</MenuItem>\r\n                            <Container>\r\n                              <Slider/>  \r\n                            </Container>\r\n                            \r\n                        <Divider/>\r\n                        \r\n                        <MenuItem onClick={popupState.close}>Colour</MenuItem>\r\n                        <MenuItem onClick={popupState.close}>Rename</MenuItem>\r\n                    </Menu>\r\n                </React.Fragment>\r\n            ))} \r\n            \r\n                      \r\n        </PopupState> \r\n    </ListItem>\r\n)\r\n\r\nexport default class sideBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleDrawerOpen = this.handleDrawerOpen.bind(this);\r\n        this.getModel = this.getModel.bind(this);\r\n        this.listModels = this.listModels.bind(this);\r\n\r\n        this.state = {\r\n            sideBarOpen : true,\r\n            files : [],\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    handleDrawerOpen() {\r\n        this.setState({\r\n            sideBarOpen : !this.state.sideBarOpen\r\n        })\r\n    }\r\n\r\n    getModel(e) {\r\n        var files = e.target.files;\r\n        //console.log(files);\r\n        //var mesh = loadModel(files)\r\n\r\n\r\n        //console.log(mesh)\r\n\r\n        var filesArr = Array.prototype.slice.call(files);\r\n        //console.log(filesArr);\r\n        this.setState({ files: [...this.state.files, ...filesArr] });\r\n        \r\n    }\r\n\r\n    listModels(modelsList) {\r\n        this.updateScene();\r\n        return modelsList.map(function(currentModel, i) {\r\n            return <ModelList model={currentModel} key={i} index = {i} />\r\n        })\r\n    }\r\n\r\n    updateScene(){\r\n        console.log('update')\r\n       // this.setState({ files : !this.state.files })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={this.handleDrawerOpen}\r\n                        edge=\"start\"\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap='true'>\r\n                        BattleMap\r\n                    </Typography>\r\n                </Toolbar>\r\n                   <Drawer \r\n                        variant=\"persistent\"\r\n                        anchor=\"left\"\r\n                        open={this.state.sideBarOpen}\r\n                    >\r\n                    <div>\r\n                      \r\n                        <List>\r\n                            <ListItem>\r\n                                <Typography variant=\"h6\" noWrap='true' edge='start'>\r\n                                    Models\r\n                                </Typography>\r\n                                <IconButton onClick={this.handleDrawerOpen} edge='end' >\r\n                                    <ChevronLeftIcon />\r\n                                </IconButton>\r\n                            </ListItem>\r\n                            <Divider />\r\n                            <ListItem>\r\n                                <Button variant=\"contained\" component=\"label\">\r\n                                    Upload Model\r\n                                    <input type=\"file\" hidden id='input' onChange={this.getModel} />\r\n                                </Button>\r\n                            </ListItem>\r\n                            <Divider />\r\n                            {this.listModels(this.state.files)} \r\n                        </List>\r\n                    </div>\r\n                \r\n                </Drawer>\r\n                <Scene meshes={this.state.files}/>\r\n            </>\r\n        )\r\n    }\r\n}","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\scene.component.js",["47","48","49","50","51"],"import React, { Component } from 'react';\r\n\r\nimport * as THREE from \"three\";\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n//import { STLLoader } from 'https://cdn.jsdelivr.net/npm/three@0.120.1/examples/jsm/loaders/STLLoader.js';\r\nimport foxy from '../3Dfiles/foxy.stl';\r\nimport dragon from '../3Dfiles/red-dragon-ancient-updated.stl';\r\nimport wall from '../3Dfiles/wall.stl';\r\nimport MContext from './provider.component';\r\n\r\nexport default class LoadScene extends Component {\r\n\r\n   constructor(props) {\r\n       super(props) \r\n\r\n      \r\n        this.loadModel = this.loadModel.bind(this); \r\n\r\n        this.state = {\r\n            models : [],\r\n            //meshes : [],\r\n        }\r\n\r\n   }\r\n\r\n\r\n    componentDidMount(){\r\n        console.log(this.props.meshes)\r\n   \r\n        // Necessary for camera/plane rotation\r\n        var degree = Math.PI/180;\r\n\r\n        // Setup\r\n        var scene = new THREE.Scene();\r\n        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        var renderer = new THREE.WebGLRenderer();\r\n\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.shadowMap.enabled = true;\r\n        \r\n        //document.body.appendChild(renderer.domElement);\r\n        this.mount.appendChild( renderer.domElement );\r\n\r\n        // Resize after viewport-size-change\r\n        window.addEventListener(\"resize\", function () {\r\n            var height = window.innerHeight;\r\n            var width = window.innerWidth;\r\n            renderer.setSize(width, height);\r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix()\r\n        });\r\n\r\n        // Adding controls\r\n        var controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n        // Ground (comment out line: \"scene.add( plane );\" if Ground is not needed...)\r\n        var plane = new THREE.Mesh(\r\n            new THREE.PlaneBufferGeometry(500, 500 ),\r\n            new THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010 } )\r\n        );\r\n        plane.rotation.x = -90 * degree;\r\n        plane.position.y = 0;\r\n        plane.receiveShadow = true;\r\n        plane.castShadow = true;\r\n        plane.name = \"plane\"\r\n        scene.add( plane );\r\n        \r\n        \r\n\r\n        var loader = new STLLoader();\r\n        // Binary files - STL Import\r\n        loader.load( foxy, function ( geometry ) {\r\n            var material = new THREE.MeshPhongMaterial( { color: 0xc60b0b} );\r\n            \r\n            var mesh = new THREE.Mesh( geometry, material );\r\n            mesh.position.set( 0, 1, 0);\r\n            mesh.rotation.x  = -90 * degree;\r\n            mesh.rotation.z = 90 * degree\r\n        \r\n            mesh.receiveShadow = true;\r\n            mesh.castShadow = true;\r\n            \r\n            mesh.name = 'foxy'\r\n            //mesh.traverse(function(child){child.castShadow = true;});\r\n            scene.add( mesh );\r\n        } );\r\n\r\n        loader.load( dragon, function ( geometry ) {\r\n            var material = new THREE.MeshPhongMaterial( { color: 0xc60b0b } );\r\n            \r\n            var mesh = new THREE.Mesh( geometry, material );\r\n            mesh.position.set( -50, 1, 200);\r\n            mesh.rotation.x  = -90 * degree;\r\n            mesh.rotation.z = 90 * degree\r\n        \r\n            mesh.receiveShadow = true;\r\n            mesh.castShadow = true;\r\n            \r\n            mesh.name = 'dragon'\r\n;\r\n            scene.add( mesh );\r\n        } );\r\n\r\n        loader.load( wall, function ( geometry ) {\r\n            var material = new THREE.MeshPhongMaterial( { color: 0x757575 } );\r\n            \r\n            var mesh = new THREE.Mesh( geometry, material );\r\n            mesh.position.set( -20, -6, 40);\r\n            mesh.rotation.x  = -90 * degree;\r\n            mesh.rotation.z = 90 * degree\r\n        \r\n            mesh.receiveShadow = true;\r\n            mesh.castShadow = true;\r\n            \r\n            mesh.name = 'dragon'\r\n;\r\n            scene.add( mesh );\r\n        } );\r\n\r\n\r\n       \r\n        \r\n        if (this.state.meshes != undefined ) {\r\n            console.log('added')\r\n            scene.add( this.state.meshes[0])\r\n        }\r\n        \r\n        \r\n        // var geometry = new THREE.BoxGeometry( 50, 50, 50 );\r\n\r\n        // var material = new THREE.MeshPhongMaterial( { color: 0x2194ce } );\r\n        // var cube = new THREE.Mesh( geometry, material );\r\n        // cube.position.set(-50, 25, -50)\r\n        // cube.castShadow = true;\r\n        // cube.receiveShadow = false;\r\n        // scene.add( cube );\r\n\r\n        // Camera positioning\r\n        camera.position.z = 100;\r\n        camera.position.y = 100;\r\n        camera.rotation.x = -45 * degree;\r\n\r\n        // Ambient light (necessary for Phong/Lambert-materials, not for Basic)\r\n        var ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        scene.add(ambientLight);\r\n        \r\n        //const light = new THREE.HemisphereLight( 0xffffff, 0x080820, 1 );\r\n        //scene.add( light );\r\n        var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\r\n        directionalLight.position.set(0, 300, 0)\r\n        directionalLight.rotation.x = -45 * degree\r\n        directionalLight.target.position.set(0,0,0)\r\n        directionalLight.castShadow = true;\r\n        \r\n        directionalLight.target.name = \"target\"\r\n        //scene.add( directionalLight );\r\n        scene.add(directionalLight.target)\r\n\r\n\r\n        directionalLight.shadow.mapSize.width = 512; // default\r\n        directionalLight.shadow.mapSize.height = 512; // default\r\n        directionalLight.shadow.camera.near = 0.1; // default\r\n        directionalLight.shadow.camera.far = 500; // default\r\n        \r\n\r\n        const spotLight = new THREE.SpotLight( 0xffffff );\r\n        spotLight.position.set(200, 200, 0 );\r\n        spotLight.angle = Math.PI / 4;\r\n        spotLight.castShadow = true;\r\n        spotLight.penumbra = 0.1;\r\n        spotLight.shadow.mapSize.width = 1024;\r\n        spotLight.shadow.mapSize.height = 1024;\r\n\r\n        spotLight.shadow.camera.near = 5;\r\n        spotLight.shadow.camera.far = 4000;\r\n        spotLight.shadow.camera.fov = 1;\r\n        spotLight.shadow.focus = .8;\r\n        scene.add( spotLight );\r\n\r\n        const helper = new THREE.DirectionalLightHelper( directionalLight, 5 );\r\n        //scene.add( helper );\r\n        const helper2 = new THREE.SpotLightHelper( spotLight, 5 );\r\n        scene.add( helper2 );\r\n\r\n        const shadowCameraHelper = new THREE.CameraHelper( spotLight.shadow.camera );\r\n        scene.add( shadowCameraHelper );\r\n\r\n        scene.traverse( function( child ) { \r\n\r\n            if ( child.isMesh ) {\r\n        \r\n                child.castShadow = true;\r\n                child.receiveShadow = true;\r\n        \r\n            }\r\n        \r\n        } );\r\n        // Draw scene\r\n        var render = function () {\r\n            renderer.render(scene, camera);\r\n        };\r\n\r\n        // Run game loop (render,repeat)\r\n        var GameLoop = function () {\r\n            requestAnimationFrame(GameLoop);\r\n\r\n            render();\r\n        };\r\n\r\n        GameLoop();\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        console.log(this.props.meshes)\r\n       // if (this.props.meshes !== prevProps)\r\n    }\r\n\r\n    loadModel(model) {\r\n\r\n        var file = model;\r\n        var loader = new STLLoader();\r\n        let reader = new FileReader();\r\n        // Necessary for camera/plane rotation\r\n        var degree = Math.PI/180;\r\n    \r\n        reader.onload = function ()\r\n        {\r\n            //var loader = new THREE.STLLoader();\r\n            // parse the .stl file\r\n            var material = new THREE.MeshPhongMaterial( { color: 0x757575 } );\r\n            var geometry = loader.parse(this.result);\r\n            var mesh = new THREE.Mesh(geometry, material);\r\n            mesh.castShadow = true;\r\n            mesh.receiveShadow = true;\r\n    \r\n            //scene.add(mesh);\r\n        };\r\n      \r\n        reader.readAsArrayBuffer(file[0])\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <> \r\n                <div ref={ref => (this.mount = ref)}/> \r\n            </>\r\n        )\r\n    }\r\n}","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\provider.component.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":4,"column":8,"nodeType":"58","messageId":"59","endLine":4,"endColumn":13},{"ruleId":"56","severity":1,"message":"60","line":6,"column":10,"nodeType":"58","messageId":"59","endLine":6,"endColumn":18},{"ruleId":"56","severity":1,"message":"61","line":20,"column":9,"nodeType":"58","messageId":"59","endLine":20,"endColumn":15},{"ruleId":"52","replacedBy":"62"},{"ruleId":"54","replacedBy":"63"},{"ruleId":"56","severity":1,"message":"60","line":2,"column":10,"nodeType":"58","messageId":"59","endLine":2,"endColumn":18},{"ruleId":"56","severity":1,"message":"64","line":11,"column":26,"nodeType":"58","messageId":"59","endLine":11,"endColumn":38},{"ruleId":"56","severity":1,"message":"65","line":15,"column":8,"nodeType":"58","messageId":"59","endLine":15,"endColumn":17},{"ruleId":"56","severity":1,"message":"66","line":16,"column":8,"nodeType":"58","messageId":"59","endLine":16,"endColumn":16},{"ruleId":"56","severity":1,"message":"66","line":10,"column":8,"nodeType":"58","messageId":"59","endLine":10,"endColumn":16},{"ruleId":"56","severity":1,"message":"67","line":55,"column":13,"nodeType":"58","messageId":"59","endLine":55,"endColumn":21},{"ruleId":"68","severity":1,"message":"69","line":124,"column":31,"nodeType":"70","messageId":"71","endLine":124,"endColumn":33},{"ruleId":"56","severity":1,"message":"72","line":181,"column":15,"nodeType":"58","messageId":"59","endLine":181,"endColumn":21},{"ruleId":"56","severity":1,"message":"61","line":227,"column":13,"nodeType":"58","messageId":"59","endLine":227,"endColumn":19},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'Scene' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'degree' is assigned a value but never used.",["73"],["74"],"'ListItemIcon' is defined but never used.","'loadModel' is defined but never used.","'MContext' is defined but never used.","'controls' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'helper' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]