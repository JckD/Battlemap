[{"C:\\Users\\Jack\\Documents\\battlemat\\src\\index.js":"1","C:\\Users\\Jack\\Documents\\battlemat\\src\\App.js":"2","C:\\Users\\Jack\\Documents\\battlemat\\src\\reportWebVitals.js":"3","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\test.component.js":"4","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\modelList.component.js":"5"},{"size":517,"mtime":1608396491121,"results":"6","hashOfConfig":"7"},{"size":1995,"mtime":1609090343457,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1608396491122,"results":"9","hashOfConfig":"7"},{"size":6999,"mtime":1609036496413,"results":"10","hashOfConfig":"7"},{"size":179,"mtime":1609037178494,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"196lrt6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Jack\\Documents\\battlemat\\src\\index.js",[],["24","25"],"C:\\Users\\Jack\\Documents\\battlemat\\src\\App.js",["26","27","28","29"],"C:\\Users\\Jack\\Documents\\battlemat\\src\\reportWebVitals.js",[],"C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\test.component.js",["30","31"],"import React, { Component } from 'react';\r\n\r\nimport * as THREE from \"three\";\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n//import { STLLoader } from 'https://cdn.jsdelivr.net/npm/three@0.120.1/examples/jsm/loaders/STLLoader.js';\r\nimport foxy from '../3Dfiles/foxy.stl';\r\nimport dragon from '../3Dfiles/red-dragon-ancient-updated.stl';\r\nimport wall from '../3Dfiles/wall.stl';\r\n\r\n\r\nexport default class LoadScene extends Component {\r\n\r\n   \r\n\r\n\r\n    componentDidMount(){\r\n\r\n        // Necessary for camera/plane rotation\r\n        var degree = Math.PI/180;\r\n\r\n        // Setup\r\n        var scene = new THREE.Scene();\r\n        var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        var renderer = new THREE.WebGLRenderer();\r\n\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.shadowMap.enabled = true;\r\n        \r\n        //document.body.appendChild(renderer.domElement);\r\n        this.mount.appendChild( renderer.domElement );\r\n\r\n        // Resize after viewport-size-change\r\n        window.addEventListener(\"resize\", function () {\r\n            var height = window.innerHeight;\r\n            var width = window.innerWidth;\r\n            renderer.setSize(width, height);\r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix();\r\n        });\r\n\r\n        // Adding controls\r\n        var controls = new OrbitControls(camera, renderer.domElement);\r\n\r\n        // Ground (comment out line: \"scene.add( plane );\" if Ground is not needed...)\r\n        var plane = new THREE.Mesh(\r\n            new THREE.PlaneBufferGeometry(500, 500 ),\r\n            new THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010 } )\r\n        );\r\n        plane.rotation.x = -90 * degree;\r\n        plane.position.y = 0;\r\n        plane.receiveShadow = true;\r\n        plane.castShadow = true;\r\n        plane.name = \"plane\"\r\n        scene.add( plane );\r\n        \r\n        \r\n\r\n        var loader = new STLLoader();\r\n        // Binary files - STL Import\r\n        loader.load( foxy, function ( geometry ) {\r\n            var material = new THREE.MeshPhongMaterial( { color: 0xc60b0b} );\r\n            \r\n            var mesh = new THREE.Mesh( geometry, material );\r\n            mesh.position.set( 0, 1, 0);\r\n            mesh.rotation.x  = -90 * degree;\r\n            mesh.rotation.z = 90 * degree\r\n        \r\n            mesh.receiveShadow = true;\r\n            mesh.castShadow = true;\r\n            \r\n            mesh.name = 'foxy'\r\n            //mesh.traverse(function(child){child.castShadow = true;});\r\n            scene.add( mesh );\r\n        } );\r\n\r\n        loader.load( dragon, function ( geometry ) {\r\n            var material = new THREE.MeshPhongMaterial( { color: 0xc60b0b } );\r\n            \r\n            var mesh = new THREE.Mesh( geometry, material );\r\n            mesh.position.set( -50, 1, 200);\r\n            mesh.rotation.x  = -90 * degree;\r\n            mesh.rotation.z = 90 * degree\r\n        \r\n            mesh.receiveShadow = true;\r\n            mesh.castShadow = true;\r\n            \r\n            mesh.name = 'dragon'\r\n            //mesh.traverse(function(child){child.castShadow = true;});\r\n            scene.add( mesh );\r\n        } );\r\n\r\n        loader.load( wall, function ( geometry ) {\r\n            var material = new THREE.MeshPhongMaterial( { color: 0x757575 } );\r\n            \r\n            var mesh = new THREE.Mesh( geometry, material );\r\n            mesh.position.set( -20, -6, 40);\r\n            mesh.rotation.x  = -90 * degree;\r\n            mesh.rotation.z = 90 * degree\r\n        \r\n            mesh.receiveShadow = true;\r\n            mesh.castShadow = true;\r\n            \r\n            mesh.name = 'dragon'\r\n            //mesh.traverse(function(child){child.castShadow = true;});\r\n            scene.add( mesh );\r\n        } );\r\n        \r\n        // var geometry = new THREE.BoxGeometry( 50, 50, 50 );\r\n\r\n        // var material = new THREE.MeshPhongMaterial( { color: 0x2194ce } );\r\n        // var cube = new THREE.Mesh( geometry, material );\r\n        // cube.position.set(-50, 25, -50)\r\n        // cube.castShadow = true;\r\n        // cube.receiveShadow = false;\r\n        // scene.add( cube );\r\n\r\n        // Camera positioning\r\n        camera.position.z = 100;\r\n        camera.position.y = 100;\r\n        camera.rotation.x = -45 * degree;\r\n\r\n        // Ambient light (necessary for Phong/Lambert-materials, not for Basic)\r\n        var ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        scene.add(ambientLight);\r\n        \r\n        //const light = new THREE.HemisphereLight( 0xffffff, 0x080820, 1 );\r\n        //scene.add( light );\r\n        var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );\r\n        directionalLight.position.set(0, 300, 0)\r\n        directionalLight.rotation.x = -45 * degree\r\n        directionalLight.target.position.set(0,0,0)\r\n        directionalLight.castShadow = true;\r\n        \r\n        directionalLight.target.name = \"target\"\r\n        //scene.add( directionalLight );\r\n        scene.add(directionalLight.target)\r\n\r\n\r\n        directionalLight.shadow.mapSize.width = 512; // default\r\n        directionalLight.shadow.mapSize.height = 512; // default\r\n        directionalLight.shadow.camera.near = 0.1; // default\r\n        directionalLight.shadow.camera.far = 500; // default\r\n        \r\n\r\n        const spotLight = new THREE.SpotLight( 0xffffff );\r\n        spotLight.position.set(200, 200, 0 );\r\n        spotLight.angle = Math.PI / 4;\r\n        spotLight.castShadow = true;\r\n        spotLight.penumbra = 0.1;\r\n        spotLight.shadow.mapSize.width = 1024;\r\n        spotLight.shadow.mapSize.height = 1024;\r\n\r\n        spotLight.shadow.camera.near = 5;\r\n        spotLight.shadow.camera.far = 4000;\r\n        spotLight.shadow.camera.fov = 1;\r\n        spotLight.shadow.focus = .8;\r\n        scene.add( spotLight );\r\n\r\n        const helper = new THREE.DirectionalLightHelper( directionalLight, 5 );\r\n        //scene.add( helper );\r\n        const helper2 = new THREE.SpotLightHelper( spotLight, 5 );\r\n        scene.add( helper2 );\r\n\r\n        const shadowCameraHelper = new THREE.CameraHelper( spotLight.shadow.camera );\r\n        scene.add( shadowCameraHelper );\r\n        \r\n\r\n\r\n        console.log(scene.f)\r\n\r\n\r\n        scene.traverse( function( child ) { \r\n\r\n            if ( child.isMesh ) {\r\n        \r\n                child.castShadow = true;\r\n                child.receiveShadow = true;\r\n        \r\n            }\r\n        \r\n        } );\r\n        // Draw scene\r\n        var render = function () {\r\n            renderer.render(scene, camera);\r\n        };\r\n\r\n        // Run game loop (render,repeat)\r\n        var GameLoop = function () {\r\n            requestAnimationFrame(GameLoop);\r\n\r\n            render();\r\n        };\r\n\r\n        GameLoop();\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <div ref={ref => (this.mount = ref)}/>\r\n        )\r\n    }\r\n}","C:\\Users\\Jack\\Documents\\battlemat\\src\\components\\modelList.component.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":5,"column":10,"nodeType":"38","messageId":"39","endLine":5,"endColumn":18},{"ruleId":"36","severity":1,"message":"40","line":6,"column":8,"nodeType":"38","messageId":"39","endLine":6,"endColumn":17},{"ruleId":"36","severity":1,"message":"41","line":9,"column":8,"nodeType":"38","messageId":"39","endLine":9,"endColumn":23},{"ruleId":"36","severity":1,"message":"42","line":14,"column":26,"nodeType":"38","messageId":"39","endLine":14,"endColumn":38},{"ruleId":"36","severity":1,"message":"43","line":43,"column":13,"nodeType":"38","messageId":"39","endLine":43,"endColumn":21},{"ruleId":"36","severity":1,"message":"44","line":160,"column":15,"nodeType":"38","messageId":"39","endLine":160,"endColumn":21},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'modelList' is defined but never used.","'ChevronLeftIcon' is defined but never used.","'ListItemIcon' is defined but never used.","'controls' is assigned a value but never used.","'helper' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]